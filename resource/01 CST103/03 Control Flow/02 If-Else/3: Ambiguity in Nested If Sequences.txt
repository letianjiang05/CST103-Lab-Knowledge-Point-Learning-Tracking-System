Unit 3: Ambiguity in Nested If Sequences
Because the else part of an if-else is optional, there is an ambiguity when an else is omitted from a nested if sequence. This is resolved by associating the else with the closest previous else-less if. For example:
```c
if (n > 0)
    if (a > b)
        z = a;
    else
        z = b;
```
The else goes to the inner if, as shown by indentation. If that isn't what you want, braces must be used to force the proper association:
```c
if (n > 0) {
    if (a > b)
        z = a;
}
else
    z = b;
```
The ambiguity is especially pernicious in situations like this:
```c
if (n > 0)
    for (i = 0; i < n; i++)
        if (s[i] > 0) {
            printf("...");
            return i;
        }
        else /* WRONG */
            printf("error -- n is negative\n");
```
The indentation shows unequivocally what you want, but the compiler doesn't get the message, and associates the else with the inner if. This kind of bug can be hard to find; it's a good idea to use braces when there are nested ifs.

Unit 3: Basic Printf Conversions and Examples
Conversion characters are shown in Table 7.1. If the character after the % is not a conversion specification, the behavior is undefined. A width or precision may be specified as *, in which case the value is computed by converting the next argument (which must be an int). For example, to print at most max characters from a string s, `printf("%.*s", max, s);`. Most of the format conversions have been illustrated in earlier chapters. One exception is the precision as it relates to strings. The following table shows the effect of a variety of specifications in printing "hello, world" (12 characters). We have put colons around each field so you can see it extent. A warning: printf uses its first argument to decide how many arguments follow and what their type is. It will get confused, and you will get wrong answers, if there are not enough arguments of if they are the wrong type. You should also be aware of the difference between these two calls: `printf(s); /* FAILS if s contains % */` and `printf("%s", s); /* SAFE */`. The function sprintf does the same conversions as printf does, but stores the output in a string. sprintf formats the arguments in arg1, arg2, etc., according to format as before, but places the result in string instead of the standard output; string must be big enough to receive the result.
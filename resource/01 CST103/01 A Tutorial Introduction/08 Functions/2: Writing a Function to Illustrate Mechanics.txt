Unit 2: Writing a Function to Illustrate Mechanics

C lacks an exponentiation operator like Fortran's ``. To exemplify function definition mechanics, let's create a `power(m, n)` function to raise an integer `m` to a positive integer power `n`. For instance, `power(2,5)` results in `32`. Although this function is not a practical exponentiation routine, as it handles only positive powers of small integers, it serves well for illustration purposes. (Note: The standard library contains a `pow(x, y)` function for computing `x^y`.)

Here's the `power` function and a main program exercising it:

```c
#include <stdio.h>

int power(int base, int n);

/* test power function */
main() {
    int i;
    for (i = 0; i < 10; ++i)
        printf("%d %d %d\n", i, power(2,i), power(-3,i));
    return 0;
}

/* power: raise base to n-th power; n >= 0 */
int power(int base, int n) {
    int i, p;
    p = 1;
    for (i = 1; i <= n; ++i)
        p = p * base;
    return p;
}
```